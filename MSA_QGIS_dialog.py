# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MsaQgisDialog
                                 A QGIS plugin
 This plugin allows the use of the Multi Scenario Approach in QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-01-14
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Thya van den Berg
        email                : w.b.van-den-berg-2020@hull.ac.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtCore import QRect
from PyQt5.QtWidgets import QTableWidgetItem, QWidget, QLineEdit, QLabel, QVBoxLayout, QComboBox, QGridLayout, \
    QDoubleSpinBox, QFrame
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from qgis.core import QgsWkbTypes


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'MSA_QGIS_dialog_base.ui'))
FORM_CLASS_TAXA, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'MSA_QGIS_dialog_popup_taxa.ui'))
FORM_CLASS_VEGCOM, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'MSA_QGIS_dialog_popup_vegcom.ui'))


### Main dialog window
class MsaQgisDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MsaQgisDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # class variables
        self.vegcomrowCount = 0
        self.vegcomcolumnCount = 1
        self.extent = None

        # events
        self.mExtentGroupBox.setMapCanvas(iface.mapCanvas())
        #self.mExtentGroupBox.setOutputExtentFromDrawOnCanvas() #for some reason causes really weird behaviour.
        # Q asked on GIS stackexchange
        self.mExtentGroupBox.extentChanged.connect(self.setExtent)
        self.getFieldsandBands(self.tableWidget, self.tableWidget_Raster)
        self.tableWidget.itemSelectionChanged.connect(lambda: self.updateSelectedRows(self.tableWidget_selected,
                                                                                      self.tableWidget))
        self.tableWidget_Raster.itemSelectionChanged.connect(lambda: self.updateSelectedRows(self.tableWidget_Sel_Raster,
                                                                                             self.tableWidget_Raster))
        self.addNew_Taxa.clicked.connect(self.addNewTaxon)
        self.addNew_VegCom.clicked.connect(self.addNewVegCom)
        self.remove_Taxa.clicked.connect(self.removeTaxaEntry)
        self.remove_vegCom.clicked.connect(self.removeVegComEntry)


    def setExtent(self):
        """Attaches the extent given by the user to a variable, and updates the 'current extent'
        so that the input can be used in further analysis"""
        self.extent = self.mExtentGroupBox.outputExtent()
        self.mExtentGroupBox.setCurrentExtent(self.extent, self.mExtentGroupBox.outputCrs())

    def getFieldsandBands(self, listTable,rasTable):
        """Fills a table widget with all fields from vector polygon layers and all bands from raster layers currently
        loaded into the QGIS interface"""
        listTable.clear()
        rowCount = 0
        columnCount = 0
        listTable.setRowCount(rowCount + 1)

        rasTable.clear()
        rasRowCount = 0
        rasColumnCount = 0
        rasTable.setRowCount(rasRowCount+1)

        for lyrnr in range(iface.mapCanvas().layerCount()):
            layer = iface.mapCanvas().layer(lyrnr)
            if (layer.type() == layer.VectorLayer) and (layer.geometryType() == QgsWkbTypes.PolygonGeometry):
                provider = layer.dataProvider()
                for field in provider.fields():
                    listTable.setItem(rowCount, columnCount,QTableWidgetItem(layer.name()))
                    columnCount +=1
                    listTable.setItem(rowCount,columnCount, QTableWidgetItem(field.name()))
                    rowCount += 1
                    listTable.setRowCount(rowCount+1)
                    columnCount -= 1


            elif layer.type() == layer.RasterLayer:
                for band in range(layer.bandCount()):
                    rasTable.setItem(rasRowCount, rasColumnCount,QTableWidgetItem(layer.name()))
                    rasColumnCount += 1
                    rasTable.setItem(rasRowCount, rasColumnCount, QTableWidgetItem(layer.bandName(band+1)))
                    rasRowCount += 1
                    rasTable.setRowCount(rasRowCount + 1)
                    rasColumnCount -= 1
            else:
                continue

            listTable.setHorizontalHeaderLabels(['Layers', 'Fields'])
            rasTable.setHorizontalHeaderLabels(['Layers', 'Bands'])
        listTable.setRowCount(rowCount)
        rasTable.setRowCount(rasRowCount)

    def updateSelectedRows(self, selectionTable,listTable):
        """ Updates a table widget with the rows selected in another table widget"""
        # selectionTable = self.tableWidget_selected
        # listTable = self.tableWidget
        selectionTable.setRowCount(len(listTable.selectionModel().selectedRows()))
        rowCountSel = 0

        for row in range(listTable.rowCount()):
            if listTable.item(row, 0).isSelected():
                selectionTable.setItem(rowCountSel,
                                       0,
                                       QTableWidgetItem(listTable.item(row, 0)))
                selectionTable.setItem(rowCountSel,
                                       1,
                                       QTableWidgetItem(listTable.item(row, 1)))
            else:
                continue
            rowCountSel += 1

    def addNewTaxon(self):
        """ Adds a new pollen taxon to the list of taxa by opening a pop-up in which the taxon short and full name,
        fall speed and relative pollen productivity can be given"""
        self.taxonPopup = MsaQgisAddTaxonPopup()
        self.taxonPopup.show()
        result = self.taxonPopup.exec_()
        # runs when apply is clicked on the add new taxon popup
        if result:
            # Get filled in values
            taxonShortName = self.taxonPopup.lineEdit_taxonShortName.text()
            taxonFullName = self.taxonPopup.lineEdit_taxonFullName.text()
            taxonFallSpeed = self.taxonPopup.doubleSpinBox_taxonFallSpeed.value()
            taxonRPP = self.taxonPopup.doubleSpinBox_taxonRPP.value()
            # Check if entry is valid and add to table
            if taxonShortName and taxonFullName and taxonFallSpeed and taxonRPP:
                rowCount = self.tableWidget_Taxa.rowCount()
                self.tableWidget_Taxa.setRowCount(rowCount+1)
                self.tableWidget_Taxa.setItem(rowCount, 0, QTableWidgetItem(taxonShortName))
                self.tableWidget_Taxa.setItem(rowCount, 1, QTableWidgetItem(taxonFullName))
                self.tableWidget_Taxa.setItem(rowCount, 2, QTableWidgetItem(str(taxonFallSpeed)))
                self.tableWidget_Taxa.setItem(rowCount, 3, QTableWidgetItem(str(taxonRPP)))
            else:
                iface.messageBar().pushMessage('Missing value in add new taxon, '
                                                    'please try again', level=1)

    def addNewVegCom(self):
        """ Adds a new vegetation community to the list of communities by opening a pop-up in which a list of species
         and their percentages, as well as a new community name can be given"""
        #pass list of taxa to the popup and open it
        taxontable= self.tableWidget_Taxa
        item_list = [taxontable.item(row,0).text() for row in range(taxontable.rowCount())]
        self.vegComPopup = MsaQgisAddVegComPopup(item_list)
        vegcomtable = self.tableWidget_vegCom

        #add entries to table
        result = self.vegComPopup.exec_()
        if result:
            self.vegcomrowCount += 1
            vegcomtable.setRowCount(self.vegcomrowCount)
            vegcomtable.setItem(self.vegcomrowCount-1, 0, QTableWidgetItem(
                self.vegComPopup.lineEdit_vegComName.text()))

            #Check if a taxon already had a column, add new column only for a new taxon
            #Create list of taxa that already have a column
            headerlist = [vegcomtable.horizontalHeaderItem(column).text() for column in range(1, vegcomtable.columnCount())]
            for taxon in range(len(self.vegComPopup.vegcomtaxoncombolist)):
                if self.vegComPopup.vegcomtaxoncombolist[taxon].currentText() in headerlist:
                    # get column number of named column
                    for column in range(vegcomtable.columnCount()):
                        headertext = vegcomtable.horizontalHeaderItem(column).text()
                        if headertext == self.vegComPopup.vegcomtaxoncombolist[taxon].currentText():
                            vegcomtable.setItem(self.vegcomrowCount-1, column, QTableWidgetItem(
                                str(self.vegComPopup.vegcomtaxondoublelist[taxon].value())))

                    # add value at right location to that column

                    pass
                elif self.vegComPopup.vegcomtaxoncombolist[taxon] not in headerlist:
                    self.vegcomcolumnCount += 1
                    self.tableWidget_vegCom.setColumnCount(self.vegcomcolumnCount)
                    # set header of new column
                    vegcomtable.setHorizontalHeaderItem(self.vegcomcolumnCount-1, QTableWidgetItem(
                                self.vegComPopup.vegcomtaxoncombolist[taxon].currentText()))
                    # add value to new column
                    vegcomtable.setItem(self.vegcomrowCount-1, self.vegcomcolumnCount-1, QTableWidgetItem(
                        str(self.vegComPopup.vegcomtaxondoublelist[taxon].value())))

                else:
                    print('error in creating veg com columns')

    def removeTaxaEntry(self):
        """ Removes selected entries from a table with a pop-up warning"""
        #get selection
        taxatable = self.tableWidget_Taxa
        for row in taxatable.selectionModel().selectedRows():
            taxatable.removeRow(row.row())

    def removeVegComEntry(self):
        """ Removes selected entries from a table with a pop-up warning"""
        #remove row
        vegcomtable = self.tableWidget_vegCom
        columns_to_remove = []
        if vegcomtable.selectionModel().selectedRows():
            for row in vegcomtable.selectionModel().selectedRows():
                vegcomtable.removeRow(row.row())
                self.vegcomrowCount -= 1
        #remove columns that no longer contain data after the row was removed
        for column in range(1,vegcomtable.columnCount()):
            item_list = []
            for row in range(vegcomtable.rowCount()):
                if vegcomtable.item(row,column):
                    item_list.append(vegcomtable.item(row,column))
            if not item_list:
                columns_to_remove.append(column)
            else:
                continue
        for listitem in columns_to_remove:
            vegcomtable.removeColumn(listitem)
            self.vegcomcolumnCount -= 1
            vegcomtable.setColumnCount(self.vegcomcolumnCount)


class MsaQgisAddTaxonPopup (QtWidgets.QDialog, FORM_CLASS_TAXA):
    def __init__(self, parent=None):
        """Popup Constructor."""
        super(MsaQgisAddTaxonPopup, self).__init__(parent)
        self.setupUi(self)


class MsaQgisAddVegComPopup (QtWidgets.QDialog, FORM_CLASS_VEGCOM):
    def __init__(self, taxonlist, parent=None):
        """Popup Constructor."""
        super(MsaQgisAddVegComPopup, self).__init__(parent)
        self.setupUi(self)
        #events
        self.pushButton_vegComAddSpecies.clicked.connect(self.addVegComTaxonRow)

        #class variables
        self.previous = 0
        self.taxonlist = taxonlist
        self.vegcomtaxondoublelist = []
        self.vegcomtaxoncombolist = []


        #add gridlayout to scrollarea
        self.frameforscrolling = QFrame(self.scrollArea)
        self.frameforscrolling.setLayout(self.gridLayout)
        self.scrollArea.setWidget(self.frameforscrolling)

        #set locations of original widgets in grid (because Qt designer won't bloody work with me)

        self.gridLayout.addWidget(self.label_Title, 0, 0, 1, 4)
        self.gridLayout.addWidget(self.label_Name, 1, 0)
        self.gridLayout.addWidget(self.lineEdit_vegComName, 1, 1, 1, 4)
        self.gridLayout.setRowStretch(2, 100) #stretch middle row to maximum possible size
        self.gridLayout.addWidget(self.pushButton_vegComAddSpecies, 3, 0, 1, 4)
        self.gridLayout.addWidget(self.buttonBox_2, 4, 1, 1, 3)
        self.gridLayout.addWidget(self.buttonBox_2, 5, 0, 1, 4)

    def addVegComTaxonRow(self):
        """ Adds a new comboBox and doubleSpinBox to be able to add a new taxon to a vegetation community"""
        label = QLabel('Taxon ' + str(int((self.previous * 0.5)+1)), self)
        self.comboBox = QComboBox()
        self.doubleSpin = QDoubleSpinBox()
        # insert the new widgets
        self.gridLayout.addWidget(label, self.previous+2, 0, 1, 4)
        self.gridLayout.addWidget(self.comboBox, self.previous+3, 0, 1, 3)
        self.gridLayout.addWidget(self.doubleSpin, self.previous+3, 3, 1, 2)
        self.gridLayout.setRowStretch(self.previous + 2, 0)  # reset stretch of previously stretched row
        self.gridLayout.setRowStretch(self.previous + 4, 100)  # set new middle row to maximum stretch
        # move the widgets below to new location
        self.gridLayout.addWidget(self.pushButton_vegComAddSpecies, self.previous + 5, 0, 1, 4)
        self.gridLayout.addWidget(self.buttonBox_2, self.previous + 6, 0, 1, 4)
        self.previous += 2
        # Fill the comboBox
        self.comboBox.addItems(self.taxonlist)
        # Create list of items to pass to the main dialog
        self.vegcomtaxoncombolist.append(self.comboBox)
        self.vegcomtaxondoublelist.append(self.doubleSpin)



